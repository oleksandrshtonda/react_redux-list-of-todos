{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoFC/TodoFC.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","components/ErrorBlock/ErrorBlock.tsx","app/hooks.ts","App.tsx","functions/filterTodos.ts","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoFC","setPickedTodo","selectedTodo","id","completed","title","className","onClick","TodoList","map","TodoFilter","setFilteredBy","setQuery","clearQuery","onChange","event","target","value","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","pickedTodo","clearPickedTodo","useState","isLoading","setIsloading","user","selectUser","userId","useEffect","getUser","finally","href","email","name","ErrorBlock","errorMessage","useAppDispatch","useDispatch","useAppSelector","useSelector","App","setErrorMessage","setIsLoading","dispatch","todosActions","catch","error","message","filteredTodos","filterBy","filterByQuery","innerTodos","copyOfTodos","preparedTodos","toLowerCase","includes","filterTodos","filterActions","currentTodoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4f85a60.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR_QUERY'\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY', payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype Action = SetQueryAction\n| ClearQueryAction\n| SetStatusAction ;\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: Filter = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo [] };\n\ntype Action = SetTodosAction;\n\nconst setTodos = (\n  todos: Todo [],\n): SetTodosAction => ({ type: 'todos/SET', payload: todos });\n\nconst todosReducer = (\n  state: Todo [] = [],\n  action: Action,\n): Todo [] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  setPickedTodo: (pickedTodo: Todo) => void;\n  selectedTodo: Todo;\n}\n\nexport const TodoFC: React.FC<Props> = ({\n  todo, setPickedTodo, selectedTodo,\n}) => {\n  const {\n    id,\n    completed,\n    title,\n  } = todo;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{id}</td>\n      {completed ? (\n        <td className=\"is-vcentered\">\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </td>\n      ) : (\n        <td className=\"is-vcentered\" />\n      )}\n      <td className=\"is-vcentered is-expanded\">\n        <p className={`has-text-${completed ? 'success' : 'danger'}`}>{title}</p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setPickedTodo(todo)}\n        >\n          <span className=\"icon\">\n            {\n              selectedTodo?.id === id\n                ? <i className=\"far fa-eye-slash\" />\n                : <i className=\"far fa-eye\" />\n            }\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoFC } from '../TodoFC';\n\ninterface Props {\n  todos: Todo[];\n  setPickedTodo: (pickedTodo: Todo) => void;\n  selectedTodo: Todo;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, setPickedTodo, selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        return (\n          <TodoFC\n            key={todo.id}\n            todo={todo}\n            setPickedTodo={setPickedTodo}\n            selectedTodo={selectedTodo}\n          />\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Status } from '../../types/Status';\n\n// interface Props {\n//   filterQuery: Status;\n//   setFilterQuery: React.Dispatch<React.SetStateAction<Status>>;\n//   queryInput: string;\n//   setQueryInput: React.Dispatch<React.SetStateAction<string>>\n// }\n\ninterface Props {\n  setFilteredBy: (status: Status) => void;\n  setQuery: (query: string) => void;\n  clearQuery: () => void;\n  query: string;\n}\n\nexport const TodoFilter: React.FC<Props>\n= ({\n  setFilteredBy,\n  setQuery,\n  clearQuery,\n  query,\n}) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilteredBy(event.target.value as Status);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length !== 0 && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  pickedTodo: Todo,\n  clearPickedTodo: () => void;\n}\n\nexport const TodoModal: React.FC<Props>\n= ({\n  pickedTodo,\n  clearPickedTodo,\n}) => {\n  const [isLoading, setIsloading] = useState<boolean>(true);\n  const [user, selectUser] = useState<User>();\n\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = pickedTodo;\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getUser(userId)\n      .then(selectUser)\n      .finally(() => setIsloading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clearPickedTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)\n              }\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const emptyTextLabel = '';\n\ninterface Props {\n  errorMessage: string;\n}\n\nexport const ErrorBlock: React.FC<Props> = ({ errorMessage }) => {\n  return (\n    <div className=\"notification is-danger\">\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => {}}\n      >\n        {emptyTextLabel}\n      </button>\n      {errorMessage}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\n//  components\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { ErrorBlock } from './components/ErrorBlock';\n\n//  types\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\n\nimport { getTodos } from './api';\nimport { filterTodos } from './functions/filterTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as filterActions } from './features/filter';\nimport { actions as currentTodoActions } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const pickedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((res) => dispatch(todosActions.setTodos(res)))\n      .catch(error => setErrorMessage(error.message))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const setQuery = (query: string) => {\n    dispatch(filterActions.setQuery(query));\n  };\n\n  const clearQuery = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  const setFilterBy = (status: Status) => {\n    dispatch(filterActions.setStatus(status));\n  };\n\n  const setPickedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const clearPickedTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const filteredTodos = filterTodos(filter.status, filter.query, todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilteredBy={setFilterBy}\n                clearQuery={clearQuery}\n                setQuery={setQuery}\n                query={filter.query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isLoading && errorMessage.length === 0 && (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={pickedTodo as Todo}\n                  setPickedTodo={setPickedTodo}\n                />\n              )}\n              {!isLoading && errorMessage.length !== 0 && <ErrorBlock errorMessage={errorMessage} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {pickedTodo && (\n        <TodoModal\n          pickedTodo={pickedTodo}\n          clearPickedTodo={clearPickedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos\n= (filterBy: Status, filterByQuery: string, innerTodos: Todo[]): Todo[] => {\n  const copyOfTodos: Todo[] = [...innerTodos];\n  let preparedTodos = [...copyOfTodos];\n\n  if (filterBy !== 'all') {\n    preparedTodos = copyOfTodos.filter(todo => {\n      switch (filterBy) {\n        case 'active':\n          return todo.completed === false;\n        case 'completed':\n          return todo.completed === true;\n        default:\n          return true;\n      }\n    });\n  }\n\n  const preparedTodosStage2 = preparedTodos.filter(todo => {\n    return todo.title.toLowerCase().includes(filterByQuery.toLowerCase());\n  });\n\n  return preparedTodosStage2 as Todo[];\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}